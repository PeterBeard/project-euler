"""
Copyright 2016 Peter Beard
Distributed under the GNU GPL v2. For full terms, see the LICENSE file.

Problem #12

The sequence of triangle numbers is generated by adding the natural numbers. So
the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten
terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
from math import ceil, floor, sqrt

def n_factors(n):
    """Return the number of unique factors of the integer n (including 1 and n)"""
    count = 2
    max_factor = sqrt(n)

    # Is n a perfect square?
    if ceil(max_factor) == floor(sqrt(n)):
        count -= 1  # sqrt(n) will get counted twice

    max_factor = int(max_factor + 1)

    for f in range(2, max_factor):
        if n % f == 0:
            count += 2
    return count

def solution():
    n = 28
    next_num = 8
    while n_factors(n) < 500:
        n += next_num
        next_num += 1

    return n

print("The first triangle number with more than 500 factors is {}".format(solution()))
