// Copyright 2016 Peter Beard
// Distributed under the GNU GPL v2. For full terms, see the LICENSE file.
//
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// 
// Let us list the factors of the first seven triangle numbers:
// 
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
// 
// We can see that 28 is the first triangle number to have over five divisors.
// 
// What is the value of the first triangle number to have over five hundred divisors?
#![feature(test)]
extern crate test;

/// Get the nth triangle number
fn nth_triangle_num(n: u32) -> u32 {
    (n * (n + 1)) / 2
}

/// Count the number of divisors of a number
fn num_divisors(n: u32) -> u32 {
    let mut count = 2;
    let max_factor = (n as f32).sqrt() as u32 + 1;

    for i in 2..max_factor {
        if n % i == 0 {
            // Each factor has a partner on the other side of the square root
            count += 2;
        }
    }
    count
}

pub fn solution() -> u32 {
    let mut n = 7; // We know the answer is after the 7th triangle number
    loop {
        if num_divisors(nth_triangle_num(n)) > 500 {
            return nth_triangle_num(n);
        }
        n += 1;
    }
}

fn main() {
    println!("The first triangle number with > 500 divisors is {}", solution());
}

#[cfg(test)]
mod tests {
    use super::*;
    use test::Bencher;

    #[test]
    fn correct() {
        assert_eq!(76576500, solution());
    }

    #[bench]
    fn bench(b: &mut Bencher) {
        b.iter(|| solution());
    }
}
