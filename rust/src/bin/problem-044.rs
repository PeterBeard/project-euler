// Copyright 2016 Peter Beard
// Distributed under the GNU GPL v2. For full terms, see the LICENSE file.
//
// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
// pentagonal numbers are:
// 
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
// 
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
// 70 − 22 = 48, is not pentagonal.
// 
// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
// difference are pentagonal and D = |Pk − Pj| is minimised; what is the value
// of D?
#![feature(test)]
extern crate test;
extern crate euler_util;
use euler_util::is_pentagonal;

pub fn solution() -> u64 {
    // Generate pentagonal numbers -- approx. upper bound found through trial and error
    const N_MAX:u64 = 2500;
    let mut pents: Vec<u64> = Vec::with_capacity(N_MAX as usize);
    for n in 1..N_MAX {
        pents.push(n*(3*n - 1)/2);
    }

    let mut min_d = 0;
    for j in &pents {
        for k in &pents {
            if k == j {
                continue;
            }

            let sum = j + k;
            let dif = if j > k {
                j - k
            } else {
                k - j
            };
            if (dif < min_d || min_d == 0) && is_pentagonal(sum) && is_pentagonal(dif) {
                min_d = dif;
            }
        }
    }
    min_d
}

fn main() {
    println!("The minimum pentagonal difference between two pentagonal numbers is {}", solution());
}

#[cfg(test)]
mod tests {
    use super::*;
    use test::Bencher;

    #[test]
    fn correct() {
        assert_eq!(5482660, solution());
    }

    #[bench]
    fn bench(b: &mut Bencher) {
        b.iter(|| solution());
    }
}
